steps:
  # This step builds the container image.
  - name: "gcr.io/cloud-builders/docker"
    id: Build
    args:
      - "build"
      - "-t"
      - "gcr.io/$PROJECT_ID/vmfrontend:$SHORT_SHA"
      - "."
    timeout: 1800s
  # This step pushes the image to Container Registry
  # The PROJECT_ID and SHORT_SHA variables are automatically
  # replaced by Cloud Build.
  - name: "gcr.io/cloud-builders/docker"
    id: Push
    args:
      - "push"
      - "gcr.io/$PROJECT_ID/vmfrontend:$SHORT_SHA"

  # This step builds the container image.
  - name: "gcr.io/cloud-builders/docker"
    id: Build-Latest
    args:
      - "build"
      - "-t"
      - "gcr.io/$PROJECT_ID/vmfrontend:latest"
      - "."
    timeout: 1800s
  # This step pushes the image to Container Registry
  # The PROJECT_ID and SHORT_SHA variables are automatically
  # replaced by Cloud Build.
  - name: "gcr.io/cloud-builders/docker"
    id: Push-Latest
    args:
      - "push"
      - "gcr.io/$PROJECT_ID/vmfrontend:latest"

  # # This step stops the EasyRent pod
  # - name: 'gcr.io/cloud-builders/kubectl'
  #   id: Stop Pod
  #   args:
  #     - 'scale'
  #     - 'deploy'
  #     - 'easyrent-app-dev'
  #     - '--replicas=0'
  #   env:
  #     - 'CLOUDSDK_COMPUTE_ZONE=us-east1-b'
  #     - 'CLOUDSDK_CONTAINER_CLUSTER=cluster-1'

  # This step deploys the application in Kubernetes
  - name: "gcr.io/cloud-builders/gke-deploy"
    args:
      - run
      - --filename=dev.yaml
      - --image=gcr.io/$PROJECT_ID/vmfrontend:$SHORT_SHA
      - --location=us-east1-b
      - --cluster=cluster-1

  # This step scales up the EasyRent pod
  - name: "gcr.io/cloud-builders/kubectl"
    id: Start Pod
    args:
      - "scale"
      - "deploy"
      - "vmfrontend-dev"
      - "--replicas=1"
    env:
      - "CLOUDSDK_COMPUTE_ZONE=us-east1-b"
      - "CLOUDSDK_CONTAINER_CLUSTER=cluster-1"

timeout: 3600s
